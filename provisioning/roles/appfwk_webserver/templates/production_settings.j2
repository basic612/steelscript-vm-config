
from steelscript.appfwk.project.settings import *

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
DATAHOME = os.getenv('DATAHOME', PROJECT_ROOT)
DATA_CACHE = os.path.join(DATAHOME, 'data', 'datacache')
INITIAL_DATA = os.path.join(DATAHOME, 'data', 'initial_data')
REPORTS_DIR = os.path.join(PROJECT_ROOT, 'reports')

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')
MEDIA_ROOT = DATA_CACHE

PROGRESSD_PORT = "{{ apache_progressd_port }}"

# For production, turn off debugging as it causes memory issues
DEBUG = False
ALLOWED_HOSTS = ['127.0.0.1']

# Logging

LOGGING_CONFIG = None

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'verbose': {
            'format': '%(asctime)s [%(levelname)-5s] %(process)d/%(thread)d %(name)s:%(lineno)s - %(message)s'
        },
        'standard': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
        'standard_syslog': {
            'format': '%(asctime)s [%(processName)s/%(process)d]: [%(levelname)-5s] %(name)s:%(lineno)s - %(message)s',
            'datefmt': '%b %d %H:%M:%S',
        },
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'steelscript.appfwk.project.nullhandler.NullHandler',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'syslog': {
            'level': 'DEBUG',
            'class': 'logging.handlers.SysLogHandler',
            'formatter': 'standard_syslog',
            'facility': 'local1',
            'address': '/dev/log'
        },
        'backend-log': {
            'level': 'WARNING',
            'class': 'logging.handlers.SysLogHandler',
            'formatter': 'standard_syslog',
            'facility': 'local2',
            'address': '/dev/log'
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'django.db.backends': {
            'handlers': ['backend-log'],
            'level': 'WARNING',
            'propagate': False,
        },
        'steelscript': {
            'handlers': ['syslog'],
            'level': 'DEBUG',
            'propagate': True,
        },
        '': {
            'handlers': ['syslog'],
            'level': 'INFO',
            'propagate': True,
        },
    }

}

import logging.config
logging.config.dictConfig(LOGGING)

# Task model specific configs
APPFWK_TASK_MODEL = 'celery'

# Optionally add additional applications specific to this project instance
INSTALLED_APPS += (
    'djcelery',
)

# redis for broker and backend
BROKER_URL = 'redis://localhost:6379/1'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/1'
CELERY_DEFAULT_QUEUE = 'appfwk_prod'

import djcelery
djcelery.setup_loader()

from celery.signals import setup_logging

@setup_logging.connect
def appfwk_setup_logging(loglevel, logfile, format, colorize, **kwargs):
    pass

#CELERY_ALWAYS_EAGER = True
TEST_RUNNER = 'djcelery.contrib.test_runner.CeleryTestSuiteRunner'

# Configure database for development or production.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': '{{ apache_django_db }}',
        'USER': '{{ apache_django_user}}',
        'PASSWORD': '{{ apache_django_password }}',
        'HOST': '',
        'PORT': '',
    }
}

# Optionally add additional global error handlers
LOCAL_ERROR_HANDLERS = (
    # additional global error handlers can be listed here
)
GLOBAL_ERROR_HANDLERS += LOCAL_ERROR_HANDLERS

SECRET_KEY = '1=th-fh8*7vctk+664#qy*$-z#gy7(fs3i#(_tcug$h%@4+wk_'

# Add other settings customizations below, which will be local to this
# machine only, and not recorded by git. This could include database or
# other authentications, LDAP settings, or any other overrides.

# For example LDAP configurations, see the file
# `project/ldap_example.py`.

# Path to local TSHARK binary
TSHARK_PATH = '/usr/sbin/tshark'
