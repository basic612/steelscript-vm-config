---
#
# update rsyslog configuration
#

- name: rsyslog appfwk settings
  lineinfile: >
    dest=/etc/rsyslog.conf regexp='{{ item.regexp }}' line='{{ item.line }}'
    insertbefore='begin forwarding rule'
  with_items:
    - { regexp: 'SteelScript', line: '# SteelScript appframework' }
    - { regexp: 'local1', line: 'local1.* /var/log/appfwk' }
    - { regexp: 'local2', line: 'local2.* /var/log/appfwk-db' }

- name: restart rsyslog
  shell: service rsyslog restart

#
# Create scheduler directory - owned by root
#

- name: create scheduler directory
  file: path={{ project_home_apache }}/scheduler
      state=directory mode=775

- name: copy scheduler.cfg
  template: src=templates/scheduler/scheduler.cfg
      dest={{ project_home_apache }}/scheduler/scheduler.cfg
      mode=600

- name: copy supervisord.conf
  template: src=templates/scheduler/supervisord.conf
      dest={{ project_home_apache }}/scheduler/supervisord.conf
      mode=600

- name: copy auth.txt
  template: src=templates/scheduler/auth.txt
      dest={{ project_home_apache }}/scheduler/auth.txt
      mode=600

- name: copy scheduler boot toogle script
  template: src=templates/scheduler/toggle_scheduler.py
      dest=/usr/local/bin/toggle_scheduler
      mode=755

#
# setup appfwk apache project
#
- name: update vagrant home permissions
  file: path={{ project_home_devel }}
      state=directory mode=755

- name: apache - steelscript directory
  file: path={{ project_home_apache }}
      state=directory mode=775
      owner={{ project_owner_apache }} group={{ project_group_apache }}

- name: apache - create app framework project directory
  shell: >
      . {{ virtualenv_devel }}/bin/activate && steel appfwk mkproject -d {{ project_root_apache }}
      chdir={{ project_home_apache }}
      creates={{ project_root_apache }}
  sudo_user: "{{ project_owner_apache }}"
  environment:
      HOME: "{{ project_home_apache }}"

- name: apache - steelscript home directory
  file: path={{ project_wsgi }}/.steelscript
      state=directory mode=775
      owner={{ project_owner_apache }} group={{ project_group_apache }}

- name: apache - install appfwk wsgi configuration
  template: src=steelscript_appfwk.wsgi
      dest={{ project_wsgi }}/steelscript_appfwk.wsgi
      mode=664
      owner={{ project_owner_apache }} group={{ project_group_apache }}

- name: copy production settings
  template: src=production_settings.j2
      dest={{ project_root_apache }}/local_settings.py
      mode=664
      owner={{ project_owner_apache }} group={{ project_group_apache }}
  notify:
  - restart apache

- name: apache - reset and initialize default app framework
  shell: >
      . {{ virtualenv_devel }}/bin/activate && python manage.py reset_appfwk --force --drop-users --trace && touch .initialized
      chdir={{ project_root_apache }}
      creates={{ project_root_apache }}/.initialized
  sudo_user: "{{ project_owner_apache }}"
  environment:
      HOME: "{{ project_home_apache }}"
  notify:
  - restart apache

- name: apache - collect static files
  shell: >
      . {{ virtualenv_devel }}/bin/activate && python manage.py collectstatic --noinput
      chdir={{ project_root_apache }}
      creates={{ project_root_apache }}/static
  sudo_user: "{{ project_owner_apache }}"
  environment:
      HOME: "{{ project_home_apache }}"
  notify:
  - restart apache

- name: ensure correct appfwk ownership
  file: path={{ project_root_apache }}
      state=directory
      owner={{ project_owner_apache }} group={{ project_group_apache }}
      recurse=yes

#
# configure celery to run as a service
#

- name: create /var/run/celery directory
  file: path=/var/run/celery
      state=directory mode=755
      owner=apache group=apache

- name: create /var/log/celery directory
  file: path=/var/log/celery
      state=directory mode=755
      owner=apache group=apache

- name: create steelscript proj directory
  file: path={{ project_root_apache }}/proj
      state=directory mode=755
      owner=apache group=apache

- name: create steelscript proj/__init__.py
  file: path={{ project_root_apache }}/proj/__init__.py
      state=touch mode=644
      owner=apache group=apache

- name: create steelscript proj/celery.py
  template: src=celery.py.j2
      dest={{ project_root_apache }}/proj/celery.py
      owner=apache group=apache mode=644

- name: create /etc/default/celeryd
  template: src=etc.default.celeryd.j2
      dest=/etc/default/celeryd
      owner=root group=root mode=644

- name: create /etc/init.d/celeryd
  template: src=etc.init.d.celeryd.j2
      dest=/etc/init.d/celeryd
      owner=root group=root mode=755

- name: setup celeryd service runlevels
  shell: >
    chkconfig --add celeryd

- name: enable celeryd service
  service: name=celeryd enabled=yes state=started
  notify:
      - restart celeryd

#
# configure progressd to run as a service
#

- name: development - create /etc/init.d/progressd
  template: src=etc.init.d.progressd.dev.j2
      dest=/etc/init.d/progressd
      owner=root group=root mode=755
  when: deployment_type == "development"

- name: distribution - create /etc/init.d/progressd
  template: src=etc.init.d.progressd.distrib.j2
      dest=/etc/init.d/progressd
      owner=root group=root mode=755
  when: deployment_type == "distribution" or
        deployment_type == "development-local"

- name: setup progressd service runlevels
  shell: >
    chkconfig --add progressd

- name: enable progressd service levels
  service: name=progressd enabled=yes state=started
  notify:
      - restart progressd


#
# add logrotate configs for syslog
#
- name: create logrotate config for appfwk
  template: src=etc.logrotate.d.appfwk.j2
      dest=/etc/logrotate.d/appfwk
      owner=root group=root mode=644

- name: create logrotate config for progressd
  template: src=etc.logrotate.d.progressd.j2
      dest=/etc/logrotate.d/progressd
      owner=root group=root mode=644
