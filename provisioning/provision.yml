---
- hosts: all
  accelerate: false
  sudo: yes
  gather_facts: false
  vars_files:
      - vars_common.yml

  tasks:
      - name: configure apt-cache
        apt: pkg=squid-deb-proxy-client update_cache=yes cache_valid_time=3600
            state=present

      - name: start zeroconf service
        service: name=avahi-daemon state=started enabled=yes

      - name: install core system, networking, and python packages
        apt: pkg={{ item }} update_cache=yes cache_valid_time=3600
            state=present
        with_items: system_packages

      - name: update openssl
        apt: pkg=openssl update_cache=yes cache_valid_time=3600
            state=latest

      - name: install python system packages
        easy_install: name={{ item }}
        with_items: python_packages

      - name: install virtualenv
        pip: name=virtualenv version=1.11.6

      # ansible cannot be easy_install'ed
      - name: install ansible
        pip: name=ansible


      #
      # setup development virtualenv and steelscript packages
      #
      - name: create virtualenv
        shell: virtualenv {{ virtualenv_devel }}
            creates={{ virtualenv_devel }}/bin/activate
        sudo_user: vagrant

      - name: create source directory
        file: path={{ project_home_devel }}/src
            state=directory mode=775
            owner={{ project_owner_devel }} group={{ project_group_devel }}

      - name: install steelscript packages and dependencies
        pip: name={{ item }}
            virtualenv={{ virtualenv_devel }}
        with_items: steelscript_packages
        sudo_user: vagrant

      - name: clone steelscript repositories
        git: repo=https://github.com/riverbed/{{ item }}.git
            dest=/home/vagrant/src/{{ item }}
            update=no
        with_items: steelscript_repos
        sudo_user: vagrant

      # Create scheduler directory - owned by root
      - name: create scheduler directory
        file: path={{ project_home_apache }}/scheduler
            state=directory mode=775

      - name: copy scheduler.cfg
        template: src=templates/scheduler/scheduler.cfg
            dest={{ project_home_apache }}/scheduler/scheduler.cfg
            mode=600

      - name: copy supervisord.conf
        template: src=templates/scheduler/supervisord.conf
            dest={{ project_home_apache }}/scheduler/supervisord.conf
            mode=600

      - name: copy auth.txt
        template: src=templates/scheduler/auth.txt
            dest={{ project_home_apache }}/scheduler/auth.txt
            mode=600

      - name: copy scheduler boot toogle script
        template: src=templates/scheduler/toggle_scheduler.py
            dest=/usr/local/bin/toggle_scheduler
            mode=755

      #
      # setup enviroment for aliases, helper functions, and ipython notebooks
      #
      - name: install ipython notebook into virtualenv
        pip: name={{ item }}
            virtualenv={{ virtualenv_devel }}
        with_items:
            - ipython[all]
            - matplotlib
        sudo_user: vagrant

      - name: steelscript helper functions and aliases
        template: src=templates/vm_env.sh
            dest={{ project_home_devel }}/.vm_env.sh
            mode=775
            owner=vagrant group=vagrant

      - name: update bashrc to source vm_env.sh
        lineinfile:
            dest=/home/vagrant/.bashrc
            line="source ~/.vm_env.sh"
            regexp="^source ~/.vm_env.sh"
            insertafter=EOF
            state=present

      #
      # create development appfwk project
      #
      - name: create app framework project directory
        shell: >
            . {{ virtualenv_devel }}/bin/activate && steel appfwk mkproject -d {{ project_root_devel}}
            chdir={{ project_home_devel }}
            creates={{ project_root_devel}}
        sudo_user: vagrant

      - name: initialize default app framework
        shell: >
            . {{ virtualenv_devel }}/bin/activate && steel appfwk init
            chdir={{ project_root_devel }}
            creates={{ project_root_devel}}/data/project.db
        sudo_user: vagrant

      #
      # setup apache certificates
      #

      - name: SSL ... make local cert directory
        file: path=/etc/ssl/localcerts
            state=directory mode=775
            owner={{ project_owner_apache }} group={{ project_group_apache }}

      - name: SSL ... install local signed cert pem
        template: src=templates/ssl_apache/selfsignedcerts/apache_local.pem
            dest=/etc/ssl/localcerts/apache_local.pem
            mode=600
            owner=root group=root
        notify:
        - restart apache

      - name: SSL ... install local signed cert key
        template: src=templates/ssl_apache/selfsignedcerts/apache_local_nopass.key
            dest=/etc/ssl/localcerts/apache_local.key
            mode=600
            owner=root group=root
        notify:
        - restart apache

      - name: SSL ... apache - update ports.conf
        template: src=templates/ssl_apache/ports.conf
            dest=/etc/apache2/ports.conf
            mode=664
            owner=root group=root
        notify:
        - restart apache

      #- name: apache - steelscript appfwk site template - non-ssl
      #  template: src=templates/steelscript_appfwk_site.j2
      #      dest=/etc/apache2/sites-available/steelscript_appfwk_site
      #      mode=664
      #      owner=root group=root
      #  notify:
      #  - restart apache

      - name: SSL ... apache - steelscript appfwk site template
        template: src=templates/ssl_apache/steelscript_appfwk_site_ssl.j2
            dest=/etc/apache2/sites-available/steelscript_appfwk_site
            mode=664
            owner=root group=root
        notify:
        - restart apache

      - name: SSL ... enable apache ssl
        shell: sudo a2enmod ssl
            creates=/etc/apache2/mods-enabled/ssl.load

      - name: SSL ... enable apache rewrite
        shell: sudo a2enmod rewrite
            creates=/etc/apache2/mods-enabled/rewrite.load


      #
      # setup apache config
      #
      - name: apache - add vagrant user to apache group
        user:
            name=vagrant
            groups='www-data'
            append=yes

      - name: apache - set apache umask to 002
        lineinfile:
            dest=/etc/apache2/envvars
            line="umask 002"
            regexp="^umask 002"
            insertafter=EOF
            state=present

      - name: apache - install mysql dependency
        pip: name={{item}} virtualenv={{ virtualenv_devel }}
        with_items:
            - MySQL-python

      - name: apache - enable appfwk site
        file: path=/etc/apache2/sites-enabled/001-steelscript_appfwk
            src=/etc/apache2/sites-available/steelscript_appfwk_site
            state=link
            mode=664
            owner=root group=root
        notify:
        - restart apache

      - name: apache - disable default site
        file: path=/etc/apache2/sites-enabled/000-default state=absent

      #
      # setup mysql database
      #
      - name: mysql - change root user password on first run
        mysql_user: login_user=root
                    login_password=''
                    name=root
                    password={{ mysql_root_password }}
                    priv=*.*:ALL,GRANT
                    host={{ item }}
        with_items:
          - $ansible_hostname
          - 127.0.0.1
          - ::1
          - localhost
        ignore_errors: true

      - name: mysql - add App Framework Database
        mysql_db: name={{ mysql_django_db }}
                  state=present
                  login_user=root
                  login_password={{ mysql_root_password }}

      - name: mysql - add App Framework django user
        mysql_user: name={{ mysql_django_user }}
                    password={{ mysql_django_password }}
                    priv={{ mysql_django_db }}.*:ALL,GRANT
                    host={{ item }}
                    login_user=root
                    login_password={{ mysql_root_password }}
        with_items:
          - $ansible_hostname
          - 127.0.0.1
          - ::1
          - localhost
        #ignore_errors: true

      # see https://github.com/ansible/ansible/issues/3572
      # command is ubuntu 12.04 specific
      - name: enable default mysql init scripts
        shell: update-rc.d mysql defaults

      - name: start and enable mysql service
        service: name=mysql state=started enabled=yes

      #
      # setup apache project
      #
      - name: apache - steelscript directory
        file: path={{ project_home_apache }}
            state=directory mode=775
            owner={{ project_owner_apache }} group={{ project_group_apache }}

      - name: apache - create app framework project directory
        shell: >
            . {{ virtualenv_devel }}/bin/activate && steel appfwk mkproject -d {{ project_root_apache }} --offline-js
            chdir={{ project_home_apache }}
            creates={{ project_root_apache }}
        sudo_user: www-data
        environment:
            HOME: "{{ project_home_apache }}"

      - name: apache - steelscript home directory
        file: path={{ project_wsgi }}/.steelscript
            state=directory mode=775
            owner={{ project_owner_apache }} group={{ project_group_apache }}

      - name: apache - install appfwk wsgi configuration
        template: src=templates/steelscript_appfwk.wsgi
            dest={{ project_wsgi }}/steelscript_appfwk.wsgi
            mode=664
            owner={{ project_owner_apache }} group={{ project_group_apache }}

      - name: copy production settings
        template: src=templates/production_settings.j2
            dest={{ project_root_apache }}/local_settings.py
            mode=664
            owner={{ project_owner_apache }} group={{ project_group_apache }}
        notify:
        - restart apache

      - name: apache - reset and initialize default app framework
        shell: >
            . {{ virtualenv_devel }}/bin/activate && python manage.py reset_appfwk --force --drop-users --trace && touch .initialized
            chdir={{ project_root_apache }}
            creates={{ project_root_apache }}/.initialized
        sudo_user: www-data
        environment:
            HOME: "{{ project_home_apache }}"
        notify:
        - restart apache

      - name: apache - collect static files
        shell: >
            . {{ virtualenv_devel }}/bin/activate && python manage.py collectstatic --noinput
            chdir={{ project_root_apache }}
            creates={{ project_root_apache }}/static
        sudo_user: www-data
        environment:
            HOME: "{{ project_home_apache }}"
        notify:
        - restart apache

      # see https://github.com/ansible/ansible/issues/3572
      # command is ubuntu 12.04 specific
      - name: enable default apache init scripts
        shell: update-rc.d apache2 defaults

      - name: start and enable apache service
        service: name=apache2 state=started enabled=yes

      #
      # update MOTD and add LICENSE
      #
      - name: disable default motd
        file: path={{ item }} mode=0644
        with_items:
          - /etc/update-motd.d/10-help-text
          - /etc/update-motd.d/91-release-upgrade
        ignore_errors: true

      - name: update login text
        template: src=templates/motd.tail
            dest=/etc/motd.tail
            mode=644
            owner=root group=root

      - name: add last provisioned message
        template: src=templates/motd_last_provisioned.sh
            dest=/etc/update-motd.d/98-last-provisioned
            mode=755
            owner=root group=root

      - name: copy readme
        template: src=templates/README
            dest=/home/vagrant/README
            mode=644
            owner=vagrant group=vagrant

      - name: copy license
        template: src=templates/LICENSE
            dest=/home/vagrant/LICENSE
            mode=644
            owner=vagrant group=vagrant

      - name: store last provision date
        shell: echo This VM was last provisioned on `date` > /etc/vagrant_last_provisioned

      - meta: flush_handlers

  handlers:
      - include: handlers.yml
