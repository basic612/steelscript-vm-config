---
- hosts: all
  accelerate: false
  sudo: yes
  gather_facts: false
  vars_files:
      - vars_common.yml

  tasks:
      - name: install core system, networking, and python packages
        yum: name={{ item }} state=present
        with_items: system_packages

      - name: install python system packages
        easy_install: name={{item}}
        with_items: python_packages

      - name: install virtualenv
        pip: name=virtualenv version=1.11.6

      # ansible cannot be easy_install'ed
      - name: install ansible
        pip: name=ansible


      #
      # setup development virtualenv and steelscript packages
      #
      - name: create virtualenv
        shell: virtualenv {{ virtualenv_devel }}
            creates={{ virtualenv_devel }}/bin/activate
        sudo_user: vagrant

      - name: create source directory
        file: path={{ project_home_devel }}/src
            state=directory mode=775
            owner={{ project_owner_devel }} group={{ project_group_devel }}

      - name: clone base steelscript repo
        git: repo={{ steelscript_repo }}
           dest={{ project_home_devel }}/src/steelscript
           update=yes
           force=yes
        sudo_user: vagrant

      # need to use '.' since 'source' doesn't exist under /bin/sh
      - name: update base steelscript
        shell: >
            . {{ virtualenv_devel }}/bin/activate && python setup.py develop
            chdir={{ project_home_devel }}/src/steelscript
        sudo_user: vagrant

      # need to use '.' since 'source' doesn't exist under /bin/sh
      - name: update steelscript packages and app framework
        shell: >
            . {{ virtualenv_devel }}/bin/activate && steel install -g --appfwk --develop -d /home/vagrant/src
            chdir={{ project_home_devel }}
        sudo_user: vagrant

      #
      # setup enviroment for aliases, helper functions, and ipython notebooks
      #
      - name: steelscript helper functions and aliases
        template: src=templates/vm_env.sh
            dest={{ project_home_devel }}/.vm_env.sh
            mode=775
            owner=vagrant group=vagrant

      - name: update bashrc to source vm_env.sh
        lineinfile:
            dest=/home/vagrant/.bashrc
            line="source ~/.vm_env.sh"
            regexp="^source ~/.vm_env.sh"
            insertafter=EOF
            state=present

      - name: ipython notebook folder
        file: path=/home/vagrant/ipython_notebooks
            state=directory mode=775
            owner=vagrant group=vagrant

      #
      # create development appfwk project
      #
      - name: create app framework project directory
        shell: >
            . {{ virtualenv_devel }}/bin/activate && steel appfwk mkproject -d {{ project_root_devel}}
            chdir={{ project_home_devel }}
            creates={{ project_root_devel}}
        sudo_user: vagrant

      - name: initialize default app framework
        shell: >
            . {{ virtualenv_devel }}/bin/activate && steel appfwk init
            chdir={{ project_root_devel }}
            creates={{ project_root_devel}}/data/project.db
        sudo_user: vagrant

      #
      # setup apache config
      #
#      - name: apache - add vagrant user to apache group
#        user:
#            name=vagrant
#            groups='www-data'
#            append=yes
#
#      - name: apache - set apache umask to 002
#        lineinfile:
#            dest=/etc/apache2/envvars
#            line="umask 002"
#            regexp="^umask 002"
#            insertafter=EOF
#            state=present

      - name: apache - install mysql dependency
        pip: name={{item}} virtualenv={{ virtualenv_devel }}
        with_items:
            - MySQL-python

      - name: apache - steelscript appfwk site template
        template: src=templates/steelscript_appfwk_site.j2
            dest=/etc/httpd/conf.d/steelscript_appfwk_site.conf
            mode=664
            owner=root group=root
        notify:
        - restart apache

#      - name: apache - enable appfwk site
#        file: path=/etc/apache2/sites-enabled/001-steelscript_appfwk
#            src=/etc/apache2/sites-available/steelscript_appfwk_site
#            state=link
#            mode=664
#            owner=root group=root
#        notify:
#        - restart apache
#
#      - name: apache - disable default site
#        file: path=/etc/apache2/sites-enabled/000-default state=absent

      #
      # setup mysql database
      #
      # see https://github.com/ansible/ansible/issues/3572
      # command is ubuntu 12.04 specific
 #      - name: enable default mysql init scripts
 #        shell: update-rc.d mysql defaults

      - name: start and enable mysql service
        service: name=mysqld state=started enabled=yes

      - name: mysql - change root user password on first run
        mysql_user: login_user=root
                    login_password=''
                    name=root
                    password={{ mysql_root_password }}
                    priv=*.*:ALL,GRANT
                    host={{ item }}
        with_items:
          - $ansible_hostname
          - 127.0.0.1
          - ::1
          - localhost
        ignore_errors: true

      - name: mysql - add App Framework Database
        mysql_db: name={{ mysql_django_db }}
                  state=present
                  login_user=root
                  login_password={{ mysql_root_password }}

      - name: mysql - add App Framework django user
        mysql_user: name={{ mysql_django_user }}
                    password={{ mysql_django_password }}
                    priv={{ mysql_django_db }}.*:ALL,GRANT
                    host={{ item }}
                    login_user=root
                    login_password={{ mysql_root_password }}
        with_items:
          - $ansible_hostname
          - 127.0.0.1
          - ::1
          - localhost
        #ignore_errors: true

      #
      # setup apache project
      #
#      # see https://github.com/ansible/ansible/issues/3572
#      # command is ubuntu 12.04 specific
#      - name: enable default apache init scripts
#        shell: update-rc.d apache2 defaults

      - name: start and enable apache service
        service: name={{ service_name }} state=started enabled=yes

      - name: apache - steelscript directory
        file: path={{ project_home_apache }}
            state=directory mode=775
            owner={{ project_owner_apache }} group={{ project_group_apache }}

      - name: apache - create app framework project directory
        shell: >
            . {{ virtualenv_devel }}/bin/activate && steel appfwk mkproject -d {{ project_root_apache }}
            chdir={{ project_home_apache }}
            creates={{ project_root_apache }}
        #sudo_user: "{{ project_owner_apache }}"
        environment:
            HOME: "{{ project_home_apache }}"

      - name: apache - steelscript home directory
        file: path={{ project_wsgi }}/.steelscript
            state=directory mode=775
            owner={{ project_owner_apache }} group={{ project_group_apache }}

      - name: apache - install appfwk wsgi configuration
        template: src=templates/steelscript_appfwk.wsgi
            dest={{ project_wsgi }}/steelscript_appfwk.wsgi
            mode=664
            owner={{ project_owner_apache }} group={{ project_group_apache }}

      - name: copy production settings
        template: src=templates/production_settings.j2
            dest={{ project_root_apache }}/local_settings.py
            mode=664
            owner={{ project_owner_apache }} group={{ project_group_apache }}
        notify:
        - restart apache

      - name: apache - reset and initialize default app framework
        shell: >
            . {{ virtualenv_devel }}/bin/activate && python manage.py reset_appfwk --force --drop-users --trace && touch .initialized
            chdir={{ project_root_apache }}
            creates={{ project_root_apache }}/.initialized
        #sudo_user: "{{ project_owner_apache }}"
        environment:
            HOME: "{{ project_home_apache }}"
        notify:
        - restart apache

      - name: apache - collect static files
        shell: >
            . {{ virtualenv_devel }}/bin/activate && python manage.py collectstatic --noinput
            chdir={{ project_root_apache }}
            creates={{ project_root_apache }}/static
        #sudo_user: "{{ project_owner_apache }}"
        environment:
            HOME: "{{ project_home_apache }}"
        notify:
        - restart apache

      - name: ensure correct appfwk ownership
        file: path={{ project_root_apache }}
            state=directory
            owner={{ project_owner_apache }} group={{ project_group_apache }}
            recurse=yes

      - meta: flush_handlers

  handlers:
      - include: handlers.yml

#- include: stage.yml reset=true
